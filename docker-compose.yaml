version: "3.9"

x-logging:
  &default-logging
  driver: loki
  options:
    loki-url: 'http://localhost:3100/loki/api/v1/push'
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<time>\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2},d{3}) (?P<message>(?s:.*))$$'

services:
  loki:
    profiles: [ "grafana" ]
    image: grafana/loki:2.7.3
    container_name: auth_template.loki
    hostname: auth_template.loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki/config.yaml:/etc/loki/config.yaml:ro
      - auth_template.loki.data:/tmp/:rw
    command: -config.file=/etc/loki/config.yaml
    restart: unless-stopped
    networks:
      - auth_template.grafana.network
    logging: *default-logging

  api:
    profiles: [ "api" ]
    container_name: auth_template.api
    hostname: auth_template.api
    build:
      context: .
    restart: unless-stopped
    expose:
      - "8000"
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      tempo:
        condition: service_started
    networks:
      - auth_template.postgres.network
      - auth_template.grafana.network
    volumes:
      - ./config:/app/config:ro
    environment:
      - CONFIG_FILE=${CONFIG_FILE:-prod_config.yml}
    command: ["python", "-m", "app.api"]
    healthcheck:
      test: ["CMD-SHELL", "curl -fsSL http://localhost:8000/healthcheck"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s
    logging: *default-logging

  postgres_migration:
    profiles: [ "migration" ]
    container_name: auth_template.postgres_migration
    build:
      context: .
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - auth_template.postgres.network
    volumes:
      - ./config:/app/config:ro
      - ./alembic.ini:/app/alembic.ini:ro
      - ./app/infrastructure/db/migrations:/app/app/infrastructure/db/migrations:ro
    environment:
      - CONFIG_FILE=${CONFIG_FILE:-prod_config.yml}
    command: ["python", "-m", "alembic", "upgrade", "head"]
    logging: *default-logging

  postgres:
    profiles: [ "api", "migration" ]
    container_name: auth_template.postgres
    image: "postgres:15-alpine"
    hostname: auth_template.postgres
    restart: unless-stopped
    expose:
      - "5432"
    ports:
      - "127.0.0.1:15432:5432"
    networks:
      - auth_template.postgres.network
    environment:
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_USER: ${POSTGRES_USER:-$USER}
      POSTGRES_DB: ${POSTGRES_DB:-$USER}
    volumes:
      - auth_template.postgres.data:/var/lib/postgresql/users:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s
    logging: *default-logging

  prometheus:
    profiles: [ "grafana" ]
    image: prom/prometheus:v2.43.0
    container_name: auth_template.prometheus
    hostname: auth_template.prometheus
    ports:
      - "9090:9090"
    networks:
      - auth_template.grafana.network
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --enable-feature=exemplar-storage
    depends_on:
      - loki
    logging: *default-logging

  tempo:
    profiles: [ "grafana" ]
    image: grafana/tempo:2.0.1
    container_name: auth_template.tempo
    hostname: auth_template.tempo
    command: [ "--target=all", "--storage.trace.backend=local", "--storage.trace.local.path=/var/tempo", "--auth.enabled=false" ]
    ports:
      - "14250:14250"
    networks:
      - auth_template.grafana.network
    depends_on:
      - loki
    logging: *default-logging

  grafana:
    profiles: [ "grafana" ]
    image: grafana/grafana:9.3.6
    container_name: auth_template.grafana
    hostname: auth_template.grafana
    restart: unless-stopped
    expose:
      - "3000"
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - auth_template.grafana.network
    volumes:
      - auth_template.grafana.data:/var/lib/grafana:rw
      - ./grafana/provisioning:/etc/grafana/provisioning:rw
      - ./grafana/dashboards:/etc/grafana/dashboards
    depends_on:
      - loki
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - VIRTUAL_HOST=auth_template.grafana
      - NETWORK_ACCESS=internal
      - VIRTUAL_PORT=3000
    logging: *default-logging

#  vector:
#    profiles: [ "grafana" ]
#    image: timberio/vector:0.27.0-alpine
#    container_name: auth_template.vector
#    hostname: auth_template.vector
#    restart: unless-stopped
#    expose:
#      - "8383"
#    networks:
#      - auth_template.grafana.network
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#      - ./vector/vector.toml:/etc/vector/vector.toml:ro
#    logging:
#      driver: "json-file"
#      options:
#        max-size: "10m"

volumes:
  auth_template.postgres.data: {}
  auth_template.grafana.data: {}
  auth_template.loki.data: {}

networks:
  auth_template.postgres.network: {}
  auth_template.grafana.network: {}
